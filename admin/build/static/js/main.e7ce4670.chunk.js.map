{"version":3,"sources":["constants/index.js","auth/authProvider.js","resources/students.js","resources/tutors.js","resources/staffs.js","resources/staffCenters.js","resources/subjects.js","resources/centers.js","resources/cities.js","resources/areas.js","resources/orders.js","resources/orderItems.js","resources/sections.js","resources/lectures.js","resources/courses.js","resources/coursegroups.js","resources/coursegroupsessions.js","resources/admins.js","resources/livesessions.js","resources/announcements.js","resources/products.js","App.js","serviceWorker.js","index.js"],"names":["API_URL","process","getLoginStatus","localStorage","getItem","setLoginStatus","status","setItem","login","a","username","password","request","Request","method","body","JSON","stringify","headers","Headers","credentials","fetch","response","Promise","reject","resolve","logout","checkAuth","checkError","error","getPermissions","params","ListActions","props","className","filters","exporter","maxResults","rest","useListContext","currentSort","resource","displayedFilters","filterValues","basePath","hasCreate","showFilter","selectedIds","total","TopToolbar","sanitizeListRestProps","cloneElement","context","ListButton","CreateButton","ExportButton","disabled","sort","SearchFilter","Filter","TextInput","label","source","StudentList","List","actions","Datagrid","TextField","EditButton","StudentCreate","Create","SimpleForm","StudentEdit","Edit","validate","required","TutorList","TutorCreate","TutorEdit","PasswordInput","StaffList","StaffCreate","StaffEdit","data","StaffCenterList","key","staffId","centerId","StaffCenterCreate","StaffCenterEdit","SubjectList","SubjectCreate","SubjectEdit","parse","v","format","CenterList","CenterCreate","CenterEdit","CityList","CityCreate","CityEdit","AreaList","AreaCreate","AreaEdit","OrderTotal","Object","values","reduce","sum","item","price","OrderList","ReferenceField","reference","sortBy","ReferenceManyField","target","OrderCreate","OrderEdit","OrderItemList","OrderItemCreate","OrderItemEdit","SectionList","SectionCreate","SectionEdit","LectureList","LectureCreate","LectureEdit","CourseList","CourseCreate","CourseEdit","CourseGroupList","CourseGroupCreate","DateInput","CourseGroupEdit","CourseGroupSessionList","CourseGroupSessionCreate","CourseGroupSessionEdit","AdminList","AdminCreate","AdminEdit","LiveSessionList","LiveSessionCreate","LiveSessionEdit","AnnouncementList","AnnouncementCreate","ProductList","ProductCreate","ProductEdit","httpClient","url","options","fetchUtils","fetchJson","App","Admin","authProvider","dataProvider","simpleRestProvider","Resource","name","list","create","edit","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.e7ce4670.chunk.js","sourcesContent":["export const API_URL = process.env.REACT_APP_API_HOST;\r\n","import { API_URL } from \"../constants\";\r\n\r\nconst getLoginStatus = () => localStorage.getItem(\"isLoggedIn\") === \"true\";\r\nconst setLoginStatus = (status) => localStorage.setItem(\"isLoggedIn\", status);\r\n\r\nexport default {\r\n  login: async ({ username, password }) => {\r\n    const request = new Request(`${API_URL}/auth/signinadmin`, {\r\n      method: \"POST\",\r\n      body: JSON.stringify({ username, password }),\r\n      headers: new Headers({ \"Content-Type\": \"application/json\" }),\r\n      credentials: \"include\",\r\n    });\r\n\r\n    const response = await fetch(request);\r\n    if (response.status < 200 || response.status >= 300) {\r\n      return Promise.reject();\r\n    } else {\r\n      setLoginStatus(true);\r\n    }\r\n    return Promise.resolve();\r\n  },\r\n  logout: async () => {\r\n    const isLoggedIn = getLoginStatus();\r\n    if (isLoggedIn) {\r\n      const request = new Request(`${API_URL}/admin/logout`, {\r\n        method: \"POST\",\r\n        headers: new Headers({ \"Content-Type\": \"application/json\" }),\r\n        credentials: \"include\",\r\n      });\r\n\r\n      const response = await fetch(request);\r\n      if (response.status < 200 || response.status >= 300) {\r\n        return Promise.reject();\r\n      }\r\n    }\r\n    setLoginStatus(false);\r\n    return Promise.resolve();\r\n  },\r\n  checkAuth: () => {\r\n    const isLoggedIn = getLoginStatus();\r\n    return isLoggedIn ? Promise.resolve() : Promise.reject();\r\n  },\r\n  checkError: (error) => {\r\n    const status = error.status;\r\n    if (status === 400 || status === 401 || status === 403) {\r\n      setLoginStatus(false);\r\n      return Promise.reject();\r\n    }\r\n    return Promise.resolve();\r\n  },\r\n  getPermissions: (params) => Promise.resolve(),\r\n};\r\n","import * as React from \"react\";\r\nimport { cloneElement } from \"react\";\r\nimport {\r\n  Create,\r\n  CreateButton,\r\n  Datagrid,\r\n  Edit,\r\n  EditButton,\r\n  ExportButton,\r\n  Filter,\r\n  List,\r\n  ListButton,\r\n  required,\r\n  sanitizeListRestProps,\r\n  Show,\r\n  SimpleForm,\r\n  SimpleShowLayout,\r\n  TextField,\r\n  TextInput,\r\n  TopToolbar,\r\n  useListContext,\r\n} from \"react-admin\";\r\n\r\nconst ListActions = (props) => {\r\n  const { className, exporter, filters, maxResults, ...rest } = props;\r\n  const {\r\n    currentSort,\r\n    resource,\r\n    displayedFilters,\r\n    filterValues,\r\n    hasCreate,\r\n    basePath,\r\n    selectedIds,\r\n    showFilter,\r\n    total,\r\n  } = useListContext();\r\n  return (\r\n    <TopToolbar className={className} {...sanitizeListRestProps(rest)}>\r\n      {filters &&\r\n        cloneElement(filters, {\r\n          resource,\r\n          showFilter,\r\n          displayedFilters,\r\n          filterValues,\r\n          context: \"button\",\r\n        })}\r\n      <ListButton basePath={basePath} />\r\n      <CreateButton basePath={basePath} />\r\n      <ExportButton\r\n        disabled={total === 0}\r\n        resource={resource}\r\n        sort={currentSort}\r\n        filterValues={filterValues}\r\n        maxResults={maxResults}\r\n      />\r\n    </TopToolbar>\r\n  );\r\n};\r\n\r\nconst SearchFilter = (props) => (\r\n  <Filter {...props}>\r\n    <TextInput label=\"First Name\" source=\"firstName\" />\r\n    <TextInput label=\"Last Name\" source=\"lastName\" />\r\n    <TextInput label=\"Phone\" source=\"phone\" />\r\n    <TextInput label=\"Email\" source=\"email\" />\r\n  </Filter>\r\n);\r\n\r\nexport const StudentList = (props) => (\r\n  <List {...props} actions={<ListActions />} filters={<SearchFilter />}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"firstName\" />\r\n      <TextField source=\"lastName\" />\r\n      <TextField source=\"email\" />\r\n      <TextField source=\"countryCode\" />\r\n      <TextField source=\"phone\" />\r\n      <TextField source=\"phoneVerified\" />\r\n      <TextField source=\"emailVerified\" />\r\n      <EditButton />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n\r\nexport const StudentCreate = (props) => (\r\n  <Create {...props}>\r\n    <SimpleForm>\r\n      <TextInput source=\"firstName\" />\r\n      <TextInput source=\"lastName\" />\r\n      <TextInput source=\"email\" />\r\n      <TextInput source=\"countryCode\" />\r\n      <TextInput source=\"phone\" />\r\n    </SimpleForm>\r\n  </Create>\r\n);\r\n\r\nexport const StudentEdit = (props) => (\r\n  <Edit {...props}>\r\n    <SimpleForm>\r\n      <TextInput disabled label=\"Id\" source=\"id\" />\r\n      <TextInput source=\"firstName\" validate={required()} />\r\n      <TextInput source=\"lastName\" validate={required()} />\r\n      <TextInput source=\"email\" validate={required()} />\r\n      <TextInput source=\"countryCode\" validate={required()} />\r\n      <TextInput source=\"phone\" validate={required()} />\r\n      <TextInput source=\"phoneVerified\" validate={required()} />\r\n      <TextInput source=\"emailVerified\" validate={required()} />\r\n    </SimpleForm>\r\n  </Edit>\r\n);\r\n\r\nexport const StudentShow = (props) => (\r\n  <Show {...props}>\r\n    <SimpleShowLayout>\r\n      <TextInput source=\"firstName\" />\r\n      <TextInput source=\"lastName\" />\r\n      <TextInput source=\"email\" />\r\n      <TextInput source=\"countryCode\" />\r\n      <TextInput source=\"phone\" />\r\n    </SimpleShowLayout>\r\n  </Show>\r\n);\r\n","import * as React from \"react\";\r\nimport { cloneElement } from \"react\";\r\nimport {\r\n  Create,\r\n  CreateButton,\r\n  Datagrid,\r\n  Edit,\r\n  EditButton,\r\n  ExportButton,\r\n  List,\r\n  ListButton,\r\n  required,\r\n  sanitizeListRestProps,\r\n  Show,\r\n  SimpleForm,\r\n  SimpleShowLayout,\r\n  TextField,\r\n  TextInput,\r\n  TopToolbar,\r\n  useListContext,\r\n  PasswordInput,\r\n} from \"react-admin\";\r\n\r\nconst ListActions = (props) => {\r\n  const { className, exporter, filters, maxResults, ...rest } = props;\r\n  const {\r\n    currentSort,\r\n    resource,\r\n    displayedFilters,\r\n    filterValues,\r\n    hasCreate,\r\n    basePath,\r\n    selectedIds,\r\n    showFilter,\r\n    total,\r\n  } = useListContext();\r\n  return (\r\n    <TopToolbar className={className} {...sanitizeListRestProps(rest)}>\r\n      {filters &&\r\n        cloneElement(filters, {\r\n          resource,\r\n          showFilter,\r\n          displayedFilters,\r\n          filterValues,\r\n          context: \"button\",\r\n        })}\r\n      <ListButton basePath={basePath} />\r\n      <CreateButton basePath={basePath} />\r\n      <ExportButton\r\n        disabled={total === 0}\r\n        resource={resource}\r\n        sort={currentSort}\r\n        filterValues={filterValues}\r\n        maxResults={maxResults}\r\n      />\r\n    </TopToolbar>\r\n  );\r\n};\r\n\r\nexport const TutorList = (props) => (\r\n  <List {...props} actions={<ListActions />}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"firstName\" />\r\n      <TextField source=\"lastName\" />\r\n      <TextField source=\"email\" />\r\n      <TextField source=\"countryCode\" />\r\n      <TextField source=\"phone\" />\r\n      <TextField source=\"hasImage\" />\r\n      <EditButton />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n\r\nexport const TutorCreate = (props) => (\r\n  <Create {...props}>\r\n    <SimpleForm>\r\n      <TextInput source=\"firstName\" validate={required()} />\r\n      <TextInput source=\"lastName\" validate={required()} />\r\n      <TextInput source=\"email\" validate={required()} />\r\n      <TextInput source=\"countryCode\" validate={required()} />\r\n      <TextInput source=\"phone\" validate={required()} />\r\n      <TextInput source=\"password\" validate={required()} />\r\n      <TextInput source=\"hasImage\" />\r\n    </SimpleForm>\r\n  </Create>\r\n);\r\n\r\nexport const TutorEdit = (props) => (\r\n  <Edit {...props}>\r\n    <SimpleForm>\r\n      <TextInput disabled label=\"Id\" source=\"id\" />\r\n      <TextInput source=\"firstName\" validate={required()} />\r\n      <TextInput source=\"lastName\" validate={required()} />\r\n      <TextInput source=\"email\" validate={required()} />\r\n      <TextInput source=\"countryCode\" validate={required()} />\r\n      <TextInput source=\"phone\" validate={required()} />\r\n      <PasswordInput source=\"password\" validate={required()} />\r\n      <TextInput source=\"hasImage\" />\r\n    </SimpleForm>\r\n  </Edit>\r\n);\r\n\r\nexport const TutorShow = (props) => (\r\n  <Show {...props}>\r\n    <SimpleShowLayout>\r\n      <TextInput source=\"firstName\" />\r\n      <TextInput source=\"lastName\" />\r\n      <TextInput source=\"email\" />\r\n      <TextInput source=\"countryCode\" />\r\n      <TextInput source=\"phone\" />\r\n    </SimpleShowLayout>\r\n  </Show>\r\n);\r\n","import * as React from \"react\";\r\nimport { cloneElement } from \"react\";\r\nimport {\r\n  Create,\r\n  CreateButton,\r\n  Datagrid,\r\n  Edit,\r\n  EditButton,\r\n  ExportButton,\r\n  List,\r\n  ListButton,\r\n  required,\r\n  sanitizeListRestProps,\r\n  Show,\r\n  SimpleForm,\r\n  SimpleShowLayout,\r\n  TextField,\r\n  TextInput,\r\n  TopToolbar,\r\n  useListContext,\r\n  PasswordInput,\r\n} from \"react-admin\";\r\n\r\nconst ListActions = (props) => {\r\n  const { className, exporter, filters, maxResults, ...rest } = props;\r\n  const {\r\n    currentSort,\r\n    resource,\r\n    displayedFilters,\r\n    filterValues,\r\n    hasCreate,\r\n    basePath,\r\n    selectedIds,\r\n    showFilter,\r\n    total,\r\n  } = useListContext();\r\n  return (\r\n    <TopToolbar className={className} {...sanitizeListRestProps(rest)}>\r\n      {filters &&\r\n        cloneElement(filters, {\r\n          resource,\r\n          showFilter,\r\n          displayedFilters,\r\n          filterValues,\r\n          context: \"button\",\r\n        })}\r\n      <ListButton basePath={basePath} />\r\n      <CreateButton basePath={basePath} />\r\n      <ExportButton\r\n        disabled={total === 0}\r\n        resource={resource}\r\n        sort={currentSort}\r\n        filterValues={filterValues}\r\n        maxResults={maxResults}\r\n      />\r\n    </TopToolbar>\r\n  );\r\n};\r\n\r\nexport const StaffList = (props) => (\r\n  <List {...props} actions={<ListActions />}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"username\" />\r\n      <TextField source=\"firstName\" />\r\n      <TextField source=\"lastName\" />\r\n      <EditButton />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n\r\nexport const StaffCreate = (props) => (\r\n  <Create {...props}>\r\n    <SimpleForm>\r\n      <TextInput source=\"username\" validate={required()} />\r\n      <TextInput source=\"firstName\" validate={required()} />\r\n      <TextInput source=\"lastName\" validate={required()} />\r\n      <TextInput source=\"password\" validate={required()} />\r\n    </SimpleForm>\r\n  </Create>\r\n);\r\n\r\nexport const StaffEdit = (props) => (\r\n  <Edit {...props}>\r\n    <SimpleForm>\r\n      <TextInput disabled label=\"Id\" source=\"id\" />\r\n      <TextInput source=\"username\" validate={required()} />\r\n      <TextInput source=\"firstName\" validate={required()} />\r\n      <TextInput source=\"lastName\" validate={required()} />\r\n      <PasswordInput source=\"password\" validate={required()} />\r\n    </SimpleForm>\r\n  </Edit>\r\n);\r\n","import * as React from \"react\";\r\nimport { cloneElement } from \"react\";\r\nimport {\r\n  Create,\r\n  CreateButton,\r\n  Datagrid,\r\n  Edit,\r\n  ExportButton,\r\n  List,\r\n  ListButton,\r\n  required,\r\n  sanitizeListRestProps,\r\n  SimpleForm,\r\n  TextField,\r\n  TextInput,\r\n  TopToolbar,\r\n  useListContext,\r\n} from \"react-admin\";\r\n\r\nconst ListActions = (props) => {\r\n  const { className, exporter, filters, maxResults, ...rest } = props;\r\n  const {\r\n    currentSort,\r\n    resource,\r\n    displayedFilters,\r\n    filterValues,\r\n    hasCreate,\r\n    basePath,\r\n    data,\r\n    selectedIds,\r\n    showFilter,\r\n    total,\r\n  } = useListContext();\r\n  return (\r\n    <TopToolbar className={className} {...sanitizeListRestProps(rest)}>\r\n      {filters &&\r\n        cloneElement(filters, {\r\n          resource,\r\n          showFilter,\r\n          displayedFilters,\r\n          filterValues,\r\n          context: \"button\",\r\n        })}\r\n      <ListButton basePath={basePath} />\r\n      <CreateButton basePath={basePath} />\r\n      <ExportButton\r\n        disabled={total === 0}\r\n        resource={resource}\r\n        sort={currentSort}\r\n        filterValues={filterValues}\r\n        maxResults={maxResults}\r\n      />\r\n    </TopToolbar>\r\n  );\r\n};\r\n\r\nexport const StaffCenterList = (props) => (\r\n  <List {...props} actions={<ListActions />}>\r\n    <Datagrid key={`${props.staffId}-${props.centerId}`}>\r\n      <TextField source=\"staffId\" />\r\n      <TextField source=\"centerId\" />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n\r\nexport const StaffCenterCreate = (props) => (\r\n  <Create {...props}>\r\n    <SimpleForm>\r\n      <TextInput source=\"staffId\" validate={required()} />\r\n      <TextInput source=\"centerId\" validate={required()} />\r\n    </SimpleForm>\r\n  </Create>\r\n);\r\n\r\nexport const StaffCenterEdit = (props) => (\r\n  <Edit {...props}>\r\n    <SimpleForm>\r\n      <TextInput source=\"staffId\" validate={required()} />\r\n      <TextInput source=\"centerId\" validate={required()} />\r\n    </SimpleForm>\r\n  </Edit>\r\n);\r\n","import * as React from \"react\";\r\nimport { cloneElement } from \"react\";\r\nimport {\r\n  Create,\r\n  CreateButton,\r\n  Datagrid,\r\n  Edit,\r\n  EditButton,\r\n  ExportButton,\r\n  List,\r\n  ListButton,\r\n  required,\r\n  sanitizeListRestProps,\r\n  SimpleForm,\r\n  TextField,\r\n  TextInput,\r\n  TopToolbar,\r\n  useListContext,\r\n} from \"react-admin\";\r\n\r\nconst ListActions = (props) => {\r\n  const { className, exporter, filters, maxResults, ...rest } = props;\r\n  const {\r\n    currentSort,\r\n    resource,\r\n    displayedFilters,\r\n    filterValues,\r\n    hasCreate,\r\n    basePath,\r\n    selectedIds,\r\n    showFilter,\r\n    total,\r\n  } = useListContext();\r\n  return (\r\n    <TopToolbar className={className} {...sanitizeListRestProps(rest)}>\r\n      {filters &&\r\n        cloneElement(filters, {\r\n          resource,\r\n          showFilter,\r\n          displayedFilters,\r\n          filterValues,\r\n          context: \"button\",\r\n        })}\r\n      <ListButton basePath={basePath} />\r\n      <CreateButton basePath={basePath} />\r\n      <ExportButton\r\n        disabled={total === 0}\r\n        resource={resource}\r\n        sort={currentSort}\r\n        filterValues={filterValues}\r\n        maxResults={maxResults}\r\n      />\r\n    </TopToolbar>\r\n  );\r\n};\r\n\r\nexport const SubjectList = (props) => (\r\n  <List {...props} actions={<ListActions />}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"name\" />\r\n      <EditButton />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n\r\nexport const SubjectCreate = (props) => (\r\n  <Create {...props}>\r\n    <SimpleForm>\r\n      <TextInput source=\"name\" validate={required()} />\r\n    </SimpleForm>\r\n  </Create>\r\n);\r\n\r\nexport const SubjectEdit = (props) => (\r\n  <Edit {...props}>\r\n    <SimpleForm>\r\n      <TextInput disabled label=\"Id\" source=\"id\" />\r\n      <TextInput\r\n        source=\"name\"\r\n        parse={(v) => JSON.parse(v)}\r\n        format={(v) => JSON.stringify(v)}\r\n        validate={required()}\r\n      />\r\n    </SimpleForm>\r\n  </Edit>\r\n);\r\n","import * as React from \"react\";\r\nimport { cloneElement } from \"react\";\r\nimport {\r\n  Create,\r\n  CreateButton,\r\n  Datagrid,\r\n  Edit,\r\n  EditButton,\r\n  ExportButton,\r\n  List,\r\n  ListButton,\r\n  required,\r\n  sanitizeListRestProps,\r\n  SimpleForm,\r\n  TextField,\r\n  TextInput,\r\n  TopToolbar,\r\n  useListContext,\r\n} from \"react-admin\";\r\n\r\nconst ListActions = (props) => {\r\n  const { className, exporter, filters, maxResults, ...rest } = props;\r\n  const {\r\n    currentSort,\r\n    resource,\r\n    displayedFilters,\r\n    filterValues,\r\n    hasCreate,\r\n    basePath,\r\n    selectedIds,\r\n    showFilter,\r\n    total,\r\n  } = useListContext();\r\n  return (\r\n    <TopToolbar className={className} {...sanitizeListRestProps(rest)}>\r\n      {filters &&\r\n        cloneElement(filters, {\r\n          resource,\r\n          showFilter,\r\n          displayedFilters,\r\n          filterValues,\r\n          context: \"button\",\r\n        })}\r\n      <ListButton basePath={basePath} />\r\n      <CreateButton basePath={basePath} />\r\n      <ExportButton\r\n        disabled={total === 0}\r\n        resource={resource}\r\n        sort={currentSort}\r\n        filterValues={filterValues}\r\n        maxResults={maxResults}\r\n      />\r\n    </TopToolbar>\r\n  );\r\n};\r\n\r\nexport const CenterList = (props) => (\r\n  <List {...props} actions={<ListActions />}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"name\" />\r\n      <TextField source=\"address\" />\r\n      <TextField source=\"longitude\" />\r\n      <TextField source=\"latitude\" />\r\n      <EditButton />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n\r\nexport const CenterCreate = (props) => (\r\n  <Create {...props}>\r\n    <SimpleForm>\r\n      <TextInput source=\"name\" validate={required()} />\r\n      <TextInput source=\"address\" validate={required()} />\r\n      <TextInput source=\"longitude\" />\r\n      <TextInput source=\"latitude\" />\r\n    </SimpleForm>\r\n  </Create>\r\n);\r\n\r\nexport const CenterEdit = (props) => (\r\n  <Edit {...props}>\r\n    <SimpleForm>\r\n      <TextInput disabled label=\"Id\" source=\"id\" />\r\n      <TextInput\r\n        source=\"name\"\r\n        parse={(v) => JSON.parse(v)}\r\n        format={(v) => JSON.stringify(v)}\r\n        validate={required()}\r\n      />\r\n      <TextInput\r\n        source=\"address\"\r\n        parse={(v) => JSON.parse(v)}\r\n        format={(v) => JSON.stringify(v)}\r\n        validate={required()}\r\n      />\r\n\r\n      {/* <JSONEditor source=\"name\" validate={required()} />\r\n      <JSONEditor source=\"address\" validate={required()} /> */}\r\n      <TextInput source=\"longitude\" />\r\n      <TextInput source=\"latitude\" />\r\n    </SimpleForm>\r\n  </Edit>\r\n);\r\n","import * as React from \"react\";\r\nimport { cloneElement } from \"react\";\r\nimport {\r\n  Create,\r\n  CreateButton,\r\n  Datagrid,\r\n  Edit,\r\n  EditButton,\r\n  ExportButton,\r\n  List,\r\n  ListButton,\r\n  required,\r\n  sanitizeListRestProps,\r\n  SimpleForm,\r\n  TextField,\r\n  TextInput,\r\n  TopToolbar,\r\n  useListContext,\r\n} from \"react-admin\";\r\n\r\nconst ListActions = (props) => {\r\n  const { className, exporter, filters, maxResults, ...rest } = props;\r\n  const {\r\n    currentSort,\r\n    resource,\r\n    displayedFilters,\r\n    filterValues,\r\n    hasCreate,\r\n    basePath,\r\n    selectedIds,\r\n    showFilter,\r\n    total,\r\n  } = useListContext();\r\n  return (\r\n    <TopToolbar className={className} {...sanitizeListRestProps(rest)}>\r\n      {filters &&\r\n        cloneElement(filters, {\r\n          resource,\r\n          showFilter,\r\n          displayedFilters,\r\n          filterValues,\r\n          context: \"button\",\r\n        })}\r\n      <ListButton basePath={basePath} />\r\n      <CreateButton basePath={basePath} />\r\n      <ExportButton\r\n        disabled={total === 0}\r\n        resource={resource}\r\n        sort={currentSort}\r\n        filterValues={filterValues}\r\n        maxResults={maxResults}\r\n      />\r\n    </TopToolbar>\r\n  );\r\n};\r\n\r\nexport const CityList = (props) => (\r\n  <List {...props} actions={<ListActions />}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"name\" />\r\n      <EditButton />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n\r\nexport const CityCreate = (props) => (\r\n  <Create {...props}>\r\n    <SimpleForm>\r\n      <TextInput source=\"name\" validate={required()} />\r\n    </SimpleForm>\r\n  </Create>\r\n);\r\n\r\nexport const CityEdit = (props) => (\r\n  <Edit {...props}>\r\n    <SimpleForm>\r\n      <TextInput disabled label=\"Id\" source=\"id\" />\r\n      <TextInput\r\n        source=\"name\"\r\n        // disabled\r\n        parse={(v) => JSON.parse(v)}\r\n        format={(v) => JSON.stringify(v)}\r\n        validate={required()}\r\n      />\r\n    </SimpleForm>\r\n  </Edit>\r\n);\r\n","import * as React from \"react\";\r\nimport { cloneElement } from \"react\";\r\nimport {\r\n  Create,\r\n  CreateButton,\r\n  Datagrid,\r\n  Edit,\r\n  EditButton,\r\n  ExportButton,\r\n  List,\r\n  ListButton,\r\n  required,\r\n  sanitizeListRestProps,\r\n  SimpleForm,\r\n  TextField,\r\n  TextInput,\r\n  TopToolbar,\r\n  useListContext,\r\n} from \"react-admin\";\r\n\r\nconst ListActions = (props) => {\r\n  const { className, exporter, filters, maxResults, ...rest } = props;\r\n  const {\r\n    currentSort,\r\n    resource,\r\n    displayedFilters,\r\n    filterValues,\r\n    hasCreate,\r\n    basePath,\r\n    selectedIds,\r\n    showFilter,\r\n    total,\r\n  } = useListContext();\r\n  return (\r\n    <TopToolbar className={className} {...sanitizeListRestProps(rest)}>\r\n      {filters &&\r\n        cloneElement(filters, {\r\n          resource,\r\n          showFilter,\r\n          displayedFilters,\r\n          filterValues,\r\n          context: \"button\",\r\n        })}\r\n      <ListButton basePath={basePath} />\r\n      <CreateButton basePath={basePath} />\r\n      <ExportButton\r\n        disabled={total === 0}\r\n        resource={resource}\r\n        sort={currentSort}\r\n        filterValues={filterValues}\r\n        maxResults={maxResults}\r\n      />\r\n    </TopToolbar>\r\n  );\r\n};\r\n\r\nexport const AreaList = (props) => (\r\n  <List {...props} actions={<ListActions />}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"name\" />\r\n      <TextField source=\"cityId\" />\r\n      <EditButton />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n\r\nexport const AreaCreate = (props) => (\r\n  <Create {...props}>\r\n    <SimpleForm>\r\n      <TextInput source=\"name\" validate={required()} />\r\n      <TextInput source=\"cityId\" validate={required()} />\r\n    </SimpleForm>\r\n  </Create>\r\n);\r\n\r\nexport const AreaEdit = (props) => (\r\n  <Edit {...props}>\r\n    <SimpleForm>\r\n      <TextInput disabled label=\"Id\" source=\"id\" />\r\n      <TextInput\r\n        source=\"name\"\r\n        // disabled\r\n        parse={(v) => JSON.parse(v)}\r\n        format={(v) => JSON.stringify(v)}\r\n        validate={required()}\r\n      />\r\n      <TextInput source=\"cityId\" />\r\n    </SimpleForm>\r\n  </Edit>\r\n);\r\n","import * as React from \"react\";\r\nimport { cloneElement } from \"react\";\r\nimport {\r\n  Create,\r\n  CreateButton,\r\n  Datagrid,\r\n  Edit,\r\n  EditButton,\r\n  ExportButton,\r\n  Filter,\r\n  List,\r\n  ListButton,\r\n  ReferenceField,\r\n  ReferenceManyField,\r\n  required,\r\n  sanitizeListRestProps,\r\n  SimpleForm,\r\n  TextField,\r\n  TextInput,\r\n  TopToolbar,\r\n  useListContext,\r\n} from \"react-admin\";\r\n\r\nconst ListActions = (props) => {\r\n  const { className, exporter, filters, maxResults, ...rest } = props;\r\n  const {\r\n    currentSort,\r\n    resource,\r\n    displayedFilters,\r\n    filterValues,\r\n    hasCreate,\r\n    basePath,\r\n    selectedIds,\r\n    showFilter,\r\n    total,\r\n  } = useListContext();\r\n  return (\r\n    <TopToolbar className={className} {...sanitizeListRestProps(rest)}>\r\n      {filters &&\r\n        cloneElement(filters, {\r\n          resource,\r\n          showFilter,\r\n          displayedFilters,\r\n          filterValues,\r\n          context: \"button\",\r\n        })}\r\n      <ListButton basePath={basePath} />\r\n      <CreateButton basePath={basePath} />\r\n      <ExportButton\r\n        disabled={total === 0}\r\n        resource={resource}\r\n        sort={currentSort}\r\n        filterValues={filterValues}\r\n        maxResults={maxResults}\r\n      />\r\n    </TopToolbar>\r\n  );\r\n};\r\n\r\nconst OrderTotal = (props) => (\r\n  <div>\r\n    {props.data\r\n      ? Object.values(props.data).reduce((sum, item) => sum + item.price, 0)\r\n      : 0}\r\n  </div>\r\n);\r\n\r\nconst SearchFilter = (props) => (\r\n  <Filter {...props}>\r\n    <TextInput label=\"Student id\" source=\"studentId\" />\r\n    <TextInput label=\"Order Number\" source=\"token\" />\r\n    <TextInput label=\"Fawry Ref Number\" source=\"fawryReferenceNumber\" />\r\n  </Filter>\r\n);\r\n\r\nexport const OrderList = (props) => (\r\n  <List {...props} actions={<ListActions />} filters={<SearchFilter />}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField label=\"Order Number\" source=\"token\" />\r\n      <TextField label=\"Fawry Ref Number\" source=\"fawryReferenceNumber\" />\r\n      <TextField label=\"Student Id\" source=\"studentId\" />\r\n      <ReferenceField\r\n        label=\"Email\"\r\n        source=\"studentId\"\r\n        reference=\"students\"\r\n        sortBy=\"title\"\r\n      >\r\n        <TextField source=\"email\" />\r\n      </ReferenceField>\r\n\r\n      <ReferenceField\r\n        label=\"Country Code\"\r\n        source=\"studentId\"\r\n        reference=\"students\"\r\n        sortBy=\"title\"\r\n      >\r\n        <TextField source=\"countryCode\" />\r\n      </ReferenceField>\r\n\r\n      <ReferenceField\r\n        label=\"Phone\"\r\n        source=\"studentId\"\r\n        reference=\"students\"\r\n        sortBy=\"title\"\r\n      >\r\n        <TextField source=\"phone\" />\r\n      </ReferenceField>\r\n\r\n      <ReferenceManyField label=\"Total\" reference=\"orderitems\" target=\"orderId\">\r\n        <OrderTotal />\r\n      </ReferenceManyField>\r\n      <TextField source=\"status\" />\r\n      <TextField source=\"type\" />\r\n      <TextField label=\"Expires in (Days)\" source=\"expiresIn\" />\r\n\r\n      <ReferenceField\r\n        label=\"Center\"\r\n        source=\"centerId\"\r\n        reference=\"centers\"\r\n        sortBy=\"title\"\r\n      >\r\n        <TextField source=\"name\" />\r\n      </ReferenceField>\r\n\r\n      <EditButton />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n\r\nexport const OrderCreate = (props) => (\r\n  <Create {...props}>\r\n    <SimpleForm>\r\n      <TextInput source=\"studentId\" validate={required()} />\r\n      <TextInput source=\"status\" />\r\n      <TextInput source=\"type\" />\r\n      <TextInput label=\"Expires in (Days)\" source=\"expiresIn\" />\r\n      <TextInput label=\"Center Id\" source=\"centerId\" />\r\n    </SimpleForm>\r\n  </Create>\r\n);\r\n\r\nexport const OrderEdit = (props) => (\r\n  <Edit {...props}>\r\n    <SimpleForm>\r\n      <TextInput disabled label=\"Id\" source=\"id\" />\r\n      <TextInput source=\"studentId\" validate={required()} />\r\n      <TextInput source=\"status\" />\r\n      <TextInput source=\"type\" />\r\n      <TextInput label=\"Expires in (Days)\" source=\"expiresIn\" />\r\n      <TextInput label=\"Center Id\" source=\"centerId\" />\r\n    </SimpleForm>\r\n  </Edit>\r\n);\r\n","import * as React from \"react\";\r\nimport { cloneElement } from \"react\";\r\nimport {\r\n  Create,\r\n  CreateButton,\r\n  Datagrid,\r\n  Edit,\r\n  EditButton,\r\n  ExportButton,\r\n  List,\r\n  ListButton,\r\n  required,\r\n  sanitizeListRestProps,\r\n  SimpleForm,\r\n  TextField,\r\n  TextInput,\r\n  TopToolbar,\r\n  useListContext,\r\n} from \"react-admin\";\r\n\r\nconst ListActions = (props) => {\r\n  const { className, exporter, filters, maxResults, ...rest } = props;\r\n  const {\r\n    currentSort,\r\n    resource,\r\n    displayedFilters,\r\n    filterValues,\r\n    hasCreate,\r\n    basePath,\r\n    selectedIds,\r\n    showFilter,\r\n    total,\r\n  } = useListContext();\r\n  return (\r\n    <TopToolbar className={className} {...sanitizeListRestProps(rest)}>\r\n      {filters &&\r\n        cloneElement(filters, {\r\n          resource,\r\n          showFilter,\r\n          displayedFilters,\r\n          filterValues,\r\n          context: \"button\",\r\n        })}\r\n      <ListButton basePath={basePath} />\r\n      <CreateButton basePath={basePath} />\r\n      <ExportButton\r\n        disabled={total === 0}\r\n        resource={resource}\r\n        sort={currentSort}\r\n        filterValues={filterValues}\r\n        maxResults={maxResults}\r\n      />\r\n    </TopToolbar>\r\n  );\r\n};\r\n\r\nexport const OrderItemList = (props) => (\r\n  <List {...props} actions={<ListActions />}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"orderId\" />\r\n      <TextField source=\"courseGroupSessionId\" />\r\n      <TextField source=\"price\" />\r\n      <EditButton />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n\r\nexport const OrderItemCreate = (props) => (\r\n  <Create {...props}>\r\n    <SimpleForm>\r\n      <TextInput source=\"orderId\" validate={required()} />\r\n      <TextInput source=\"courseGroupSessionId\" validate={required()} />\r\n      <TextInput source=\"price\" validate={required()} />\r\n    </SimpleForm>\r\n  </Create>\r\n);\r\n\r\nexport const OrderItemEdit = (props) => (\r\n  <Edit {...props}>\r\n    <SimpleForm>\r\n      <TextInput disabled label=\"Id\" source=\"id\" />\r\n      <TextInput source=\"orderId\" validate={required()} />\r\n      <TextInput source=\"courseGroupSessionId\" validate={required()} />\r\n      <TextInput source=\"price\" validate={required()} />\r\n    </SimpleForm>\r\n  </Edit>\r\n);\r\n","import * as React from \"react\";\r\nimport { cloneElement } from \"react\";\r\nimport {\r\n  Create,\r\n  CreateButton,\r\n  Datagrid,\r\n  Edit,\r\n  EditButton,\r\n  ExportButton,\r\n  List,\r\n  ListButton,\r\n  required,\r\n  sanitizeListRestProps,\r\n  SimpleForm,\r\n  TextField,\r\n  TextInput,\r\n  TopToolbar,\r\n  useListContext,\r\n} from \"react-admin\";\r\n\r\nconst ListActions = (props) => {\r\n  const { className, exporter, filters, maxResults, ...rest } = props;\r\n  const {\r\n    currentSort,\r\n    resource,\r\n    displayedFilters,\r\n    filterValues,\r\n    hasCreate,\r\n    basePath,\r\n    selectedIds,\r\n    showFilter,\r\n    total,\r\n  } = useListContext();\r\n  return (\r\n    <TopToolbar className={className} {...sanitizeListRestProps(rest)}>\r\n      {filters &&\r\n        cloneElement(filters, {\r\n          resource,\r\n          showFilter,\r\n          displayedFilters,\r\n          filterValues,\r\n          context: \"button\",\r\n        })}\r\n      <ListButton basePath={basePath} />\r\n      <CreateButton basePath={basePath} />\r\n      <ExportButton\r\n        disabled={total === 0}\r\n        resource={resource}\r\n        sort={currentSort}\r\n        filterValues={filterValues}\r\n        maxResults={maxResults}\r\n      />\r\n    </TopToolbar>\r\n  );\r\n};\r\n\r\nexport const SectionList = (props) => (\r\n  <List {...props} actions={<ListActions />}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"title\" />\r\n      <TextField source=\"courseId\" />\r\n      <TextField source=\"order\" />\r\n      <EditButton />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n\r\nexport const SectionCreate = (props) => (\r\n  <Create {...props}>\r\n    <SimpleForm>\r\n      <TextInput source=\"title\" validate={required()} />\r\n      <TextInput source=\"courseId\" validate={required()} />\r\n      <TextInput source=\"order\" validate={required()} />\r\n    </SimpleForm>\r\n  </Create>\r\n);\r\n\r\nexport const SectionEdit = (props) => (\r\n  <Edit {...props}>\r\n    <SimpleForm>\r\n      <TextInput disabled label=\"Id\" source=\"id\" />\r\n      <TextInput source=\"title\" validate={required()} />\r\n      <TextInput source=\"courseId\" validate={required()} />\r\n      <TextInput source=\"order\" validate={required()} />\r\n    </SimpleForm>\r\n  </Edit>\r\n);\r\n","import * as React from \"react\";\r\nimport { cloneElement } from \"react\";\r\nimport {\r\n  Create,\r\n  CreateButton,\r\n  Datagrid,\r\n  Edit,\r\n  EditButton,\r\n  ExportButton,\r\n  List,\r\n  ListButton,\r\n  required,\r\n  sanitizeListRestProps,\r\n  SimpleForm,\r\n  TextField,\r\n  TextInput,\r\n  TopToolbar,\r\n  useListContext,\r\n} from \"react-admin\";\r\n\r\nconst ListActions = (props) => {\r\n  const { className, exporter, filters, maxResults, ...rest } = props;\r\n  const {\r\n    currentSort,\r\n    resource,\r\n    displayedFilters,\r\n    filterValues,\r\n    hasCreate,\r\n    basePath,\r\n    selectedIds,\r\n    showFilter,\r\n    total,\r\n  } = useListContext();\r\n  return (\r\n    <TopToolbar className={className} {...sanitizeListRestProps(rest)}>\r\n      {filters &&\r\n        cloneElement(filters, {\r\n          resource,\r\n          showFilter,\r\n          displayedFilters,\r\n          filterValues,\r\n          context: \"button\",\r\n        })}\r\n      <ListButton basePath={basePath} />\r\n      <CreateButton basePath={basePath} />\r\n      <ExportButton\r\n        disabled={total === 0}\r\n        resource={resource}\r\n        sort={currentSort}\r\n        filterValues={filterValues}\r\n        maxResults={maxResults}\r\n      />\r\n    </TopToolbar>\r\n  );\r\n};\r\n\r\nexport const LectureList = (props) => (\r\n  <List {...props} actions={<ListActions />}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"title\" />\r\n      <TextField source=\"price\" />\r\n      <TextField source=\"courseId\" />\r\n      <TextField source=\"sectionId\" />\r\n      <TextField source=\"order\" />\r\n      <TextField source=\"videoUrl\" />\r\n      <EditButton />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n\r\nexport const LectureCreate = (props) => (\r\n  <Create {...props}>\r\n    <SimpleForm>\r\n      <TextInput source=\"courseId\" validate={required()} />\r\n      <TextInput source=\"sectionId\" validate={required()} />\r\n      <TextInput source=\"title\" validate={required()} />\r\n      <TextInput source=\"order\" validate={required()} />\r\n      <TextInput source=\"price\" validate={required()} />\r\n      <TextInput source=\"videoUrl\" />\r\n    </SimpleForm>\r\n  </Create>\r\n);\r\n\r\nexport const LectureEdit = (props) => (\r\n  <Edit {...props}>\r\n    <SimpleForm>\r\n      <TextInput disabled label=\"Id\" source=\"id\" />\r\n      <TextInput source=\"courseId\" validate={required()} />\r\n      <TextInput source=\"sectionId\" validate={required()} />\r\n      <TextInput source=\"title\" validate={required()} />\r\n      <TextInput source=\"order\" validate={required()} />\r\n      <TextInput source=\"price\" validate={required()} />\r\n      <TextInput source=\"videoUrl\" />\r\n    </SimpleForm>\r\n  </Edit>\r\n);\r\n","import * as React from \"react\";\r\nimport { cloneElement } from \"react\";\r\nimport {\r\n  Create,\r\n  CreateButton,\r\n  Datagrid,\r\n  Edit,\r\n  EditButton,\r\n  ExportButton,\r\n  List,\r\n  ListButton,\r\n  required,\r\n  sanitizeListRestProps,\r\n  SimpleForm,\r\n  TextField,\r\n  TextInput,\r\n  TopToolbar,\r\n  useListContext,\r\n  ReferenceField,\r\n} from \"react-admin\";\r\n\r\nconst ListActions = (props) => {\r\n  const { className, exporter, filters, maxResults, ...rest } = props;\r\n  const {\r\n    currentSort,\r\n    resource,\r\n    displayedFilters,\r\n    filterValues,\r\n    hasCreate,\r\n    basePath,\r\n    selectedIds,\r\n    showFilter,\r\n    total,\r\n  } = useListContext();\r\n  return (\r\n    <TopToolbar className={className} {...sanitizeListRestProps(rest)}>\r\n      {filters &&\r\n        cloneElement(filters, {\r\n          resource,\r\n          showFilter,\r\n          displayedFilters,\r\n          filterValues,\r\n          context: \"button\",\r\n        })}\r\n      <ListButton basePath={basePath} />\r\n      <CreateButton basePath={basePath} />\r\n      <ExportButton\r\n        disabled={total === 0}\r\n        resource={resource}\r\n        sort={currentSort}\r\n        filterValues={filterValues}\r\n        maxResults={maxResults}\r\n      />\r\n    </TopToolbar>\r\n  );\r\n};\r\n\r\nexport const CourseList = (props) => (\r\n  <List {...props} actions={<ListActions />}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n\r\n      <ReferenceField label=\"First Name\" source=\"tutorId\" reference=\"tutors\">\r\n        <TextField source=\"firstName\" />\r\n      </ReferenceField>\r\n\r\n      <ReferenceField label=\"Last Name\" source=\"tutorId\" reference=\"tutors\">\r\n        <TextField source=\"lastName\" />\r\n      </ReferenceField>\r\n\r\n      <ReferenceField label=\"Subject\" source=\"subjectId\" reference=\"subjects\">\r\n        <TextField source=\"name\" />\r\n      </ReferenceField>\r\n\r\n      <TextField source=\"education\" />\r\n      <TextField source=\"grade\" />\r\n      <TextField source=\"videoUrl\" />\r\n      <EditButton />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n\r\nexport const CourseCreate = (props) => (\r\n  <Create {...props}>\r\n    <SimpleForm>\r\n      <TextInput source=\"subjectId\" validate={required()} />\r\n      <TextInput source=\"tutorId\" validate={required()} />\r\n      <TextInput source=\"education\" validate={required()} />\r\n      <TextInput source=\"grade\" validate={required()} />\r\n      <TextInput source=\"description\" validate={required()} />\r\n      <TextInput source=\"videoUrl\" />\r\n    </SimpleForm>\r\n  </Create>\r\n);\r\n\r\nexport const CourseEdit = (props) => (\r\n  <Edit {...props}>\r\n    <SimpleForm>\r\n      <TextInput disabled label=\"Id\" source=\"id\" />\r\n      <TextInput source=\"subjectId\" validate={required()} />\r\n      <TextInput source=\"tutorId\" validate={required()} />\r\n      <TextInput source=\"education\" validate={required()} />\r\n      <TextInput source=\"grade\" validate={required()} />\r\n      <TextInput source=\"description\" validate={required()} />\r\n      <TextInput source=\"videoUrl\" />\r\n    </SimpleForm>\r\n  </Edit>\r\n);\r\n","import * as React from \"react\";\r\nimport { cloneElement } from \"react\";\r\nimport {\r\n  Create,\r\n  CreateButton,\r\n  Datagrid,\r\n  Edit,\r\n  EditButton,\r\n  ExportButton,\r\n  List,\r\n  ListButton,\r\n  required,\r\n  sanitizeListRestProps,\r\n  SimpleForm,\r\n  TextField,\r\n  TextInput,\r\n  TopToolbar,\r\n  useListContext,\r\n  ReferenceField,\r\n  DateInput,\r\n} from \"react-admin\";\r\n\r\nconst ListActions = (props) => {\r\n  const { className, exporter, filters, maxResults, ...rest } = props;\r\n  const {\r\n    currentSort,\r\n    resource,\r\n    displayedFilters,\r\n    filterValues,\r\n    hasCreate,\r\n    basePath,\r\n    selectedIds,\r\n    showFilter,\r\n    total,\r\n  } = useListContext();\r\n  return (\r\n    <TopToolbar className={className} {...sanitizeListRestProps(rest)}>\r\n      {filters &&\r\n        cloneElement(filters, {\r\n          resource,\r\n          showFilter,\r\n          displayedFilters,\r\n          filterValues,\r\n          context: \"button\",\r\n        })}\r\n      <ListButton basePath={basePath} />\r\n      <CreateButton basePath={basePath} />\r\n      <ExportButton\r\n        disabled={total === 0}\r\n        resource={resource}\r\n        sort={currentSort}\r\n        filterValues={filterValues}\r\n        maxResults={maxResults}\r\n      />\r\n    </TopToolbar>\r\n  );\r\n};\r\n\r\nexport const CourseGroupList = (props) => (\r\n  <List {...props} actions={<ListActions />}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"courseId\" />\r\n\r\n      <ReferenceField source=\"centerId\" reference=\"centers\">\r\n        <TextField source=\"name\" />\r\n      </ReferenceField>\r\n\r\n      <ReferenceField source=\"centerId\" reference=\"centers\">\r\n        <TextField source=\"address\" />\r\n      </ReferenceField>\r\n\r\n      <TextField source=\"weekDays\" />\r\n      <TextField source=\"startDate\" />\r\n      <TextField source=\"endDate\" />\r\n      <TextField source=\"capacity\" />\r\n      <TextField source=\"type\" />\r\n      <EditButton />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n\r\nexport const CourseGroupCreate = (props) => (\r\n  <Create {...props}>\r\n    <SimpleForm>\r\n      <TextInput source=\"courseId\" validate={required()} />\r\n      <TextInput source=\"centerId\" />\r\n      <TextInput source=\"areaId\" validate={required()} />\r\n      <TextInput source=\"cityId\" validate={required()} />\r\n      <TextInput source=\"address\" validate={required()} />\r\n      <TextInput source=\"weekDays\" />\r\n      <DateInput source=\"startDate\" validate={required()} />\r\n      <DateInput source=\"endDate\" validate={required()} />\r\n      <TextInput source=\"capacity\" />\r\n      <TextInput source=\"type\" validate={required()} />\r\n    </SimpleForm>\r\n  </Create>\r\n);\r\n\r\nexport const CourseGroupEdit = (props) => (\r\n  <Edit {...props}>\r\n    <SimpleForm>\r\n      <TextInput source=\"courseId\" validate={required()} />\r\n      <TextInput source=\"centerId\" />\r\n      <TextInput source=\"areaId\" validate={required()} />\r\n      <TextInput source=\"cityId\" validate={required()} />\r\n      <TextInput source=\"address\" validate={required()} />\r\n      <TextInput\r\n        source=\"weekDays\"\r\n        parse={(v) => JSON.parse(v)}\r\n        format={(v) => JSON.stringify(v)}\r\n      />\r\n      <DateInput source=\"startDate\" validate={required()} />\r\n      <DateInput source=\"endDate\" validate={required()} />\r\n      <TextInput source=\"capacity\" />\r\n      <TextInput source=\"type\" validate={required()} />\r\n    </SimpleForm>\r\n  </Edit>\r\n);\r\n","import * as React from \"react\";\r\nimport { cloneElement } from \"react\";\r\nimport {\r\n  Create,\r\n  CreateButton,\r\n  Datagrid,\r\n  Edit,\r\n  EditButton,\r\n  ExportButton,\r\n  List,\r\n  ListButton,\r\n  required,\r\n  sanitizeListRestProps,\r\n  SimpleForm,\r\n  TextField,\r\n  TextInput,\r\n  TopToolbar,\r\n  useListContext,\r\n  ReferenceField,\r\n  DateInput,\r\n} from \"react-admin\";\r\n\r\nconst ListActions = (props) => {\r\n  const { className, exporter, filters, maxResults, ...rest } = props;\r\n  const {\r\n    currentSort,\r\n    resource,\r\n    displayedFilters,\r\n    filterValues,\r\n    hasCreate,\r\n    basePath,\r\n    selectedIds,\r\n    showFilter,\r\n    total,\r\n  } = useListContext();\r\n  return (\r\n    <TopToolbar className={className} {...sanitizeListRestProps(rest)}>\r\n      {filters &&\r\n        cloneElement(filters, {\r\n          resource,\r\n          showFilter,\r\n          displayedFilters,\r\n          filterValues,\r\n          context: \"button\",\r\n        })}\r\n      <ListButton basePath={basePath} />\r\n      <CreateButton basePath={basePath} />\r\n      <ExportButton\r\n        disabled={total === 0}\r\n        resource={resource}\r\n        sort={currentSort}\r\n        filterValues={filterValues}\r\n        maxResults={maxResults}\r\n      />\r\n    </TopToolbar>\r\n  );\r\n};\r\n\r\nexport const CourseGroupSessionList = (props) => (\r\n  <List {...props} actions={<ListActions />}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"courseGroupId\" />\r\n      <TextField source=\"lectureId\" />\r\n      <TextField source=\"from\" />\r\n      <TextField source=\"to\" />\r\n      <TextField source=\"date\" />\r\n      <TextField source=\"productId\" />\r\n      <EditButton />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n\r\nexport const CourseGroupSessionCreate = (props) => (\r\n  <Create {...props}>\r\n    <SimpleForm>\r\n      <TextInput source=\"courseGroupId\" validate={required()} />\r\n      <TextInput source=\"lectureId\" validate={required()} />\r\n      <TextInput source=\"from\" validate={required()} />\r\n      <TextInput source=\"to\" validate={required()} />\r\n      <TextInput source=\"productId\" validate={required()} />\r\n      <DateInput source=\"date\" validate={required()} />\r\n    </SimpleForm>\r\n  </Create>\r\n);\r\n\r\nexport const CourseGroupSessionEdit = (props) => (\r\n  <Edit {...props}>\r\n    <SimpleForm>\r\n      <TextInput disabled label=\"Id\" source=\"id\" />\r\n      <TextInput source=\"courseGroupId\" validate={required()} />\r\n      <TextInput source=\"lectureId\" validate={required()} />\r\n      <TextInput source=\"from\" validate={required()} />\r\n      <TextInput source=\"to\" validate={required()} />\r\n      <TextInput source=\"productId\" validate={required()} />\r\n      <DateInput source=\"date\" validate={required()} />\r\n    </SimpleForm>\r\n  </Edit>\r\n);\r\n","import * as React from \"react\";\r\nimport { cloneElement } from \"react\";\r\nimport {\r\n  Create,\r\n  CreateButton,\r\n  Datagrid,\r\n  Edit,\r\n  EditButton,\r\n  ExportButton,\r\n  List,\r\n  ListButton,\r\n  PasswordInput,\r\n  required,\r\n  sanitizeListRestProps,\r\n  SimpleForm,\r\n  TextField,\r\n  TextInput,\r\n  TopToolbar,\r\n  useListContext,\r\n} from \"react-admin\";\r\n\r\nconst ListActions = (props) => {\r\n  const { className, exporter, filters, maxResults, ...rest } = props;\r\n  const {\r\n    currentSort,\r\n    resource,\r\n    displayedFilters,\r\n    filterValues,\r\n    hasCreate,\r\n    basePath,\r\n    selectedIds,\r\n    showFilter,\r\n    total,\r\n  } = useListContext();\r\n  return (\r\n    <TopToolbar className={className} {...sanitizeListRestProps(rest)}>\r\n      {filters &&\r\n        cloneElement(filters, {\r\n          resource,\r\n          showFilter,\r\n          displayedFilters,\r\n          filterValues,\r\n          context: \"button\",\r\n        })}\r\n      <ListButton basePath={basePath} />\r\n      <CreateButton basePath={basePath} />\r\n      <ExportButton\r\n        disabled={total === 0}\r\n        resource={resource}\r\n        sort={currentSort}\r\n        filterValues={filterValues}\r\n        maxResults={maxResults}\r\n      />\r\n    </TopToolbar>\r\n  );\r\n};\r\n\r\nexport const AdminList = (props) => (\r\n  <List {...props} actions={<ListActions />}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"username\" />\r\n      <TextField source=\"firstName\" />\r\n      <TextField source=\"lastName\" />\r\n      <EditButton />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n\r\nexport const AdminCreate = (props) => (\r\n  <Create {...props}>\r\n    <SimpleForm>\r\n      <TextInput source=\"username\" validate={required()} />\r\n      <TextInput source=\"firstName\" />\r\n      <TextInput source=\"lastName\" />\r\n      <PasswordInput source=\"password\" validate={required()} />\r\n    </SimpleForm>\r\n  </Create>\r\n);\r\n\r\nexport const AdminEdit = (props) => (\r\n  <Edit {...props}>\r\n    <SimpleForm>\r\n      <TextInput disabled label=\"Id\" source=\"id\" />\r\n      <TextInput source=\"username\" validate={required()} />\r\n      <TextInput source=\"firstName\" validate={required()} />\r\n      <TextInput source=\"lastName\" validate={required()} />\r\n      <PasswordInput source=\"password\" validate={required()} />\r\n    </SimpleForm>\r\n  </Edit>\r\n);\r\n","import * as React from \"react\";\r\nimport { cloneElement } from \"react\";\r\nimport {\r\n  Create,\r\n  CreateButton,\r\n  Datagrid,\r\n  Edit,\r\n  EditButton,\r\n  ExportButton,\r\n  List,\r\n  ListButton,\r\n  required,\r\n  sanitizeListRestProps,\r\n  SimpleForm,\r\n  TextField,\r\n  TextInput,\r\n  TopToolbar,\r\n  useListContext,\r\n  ReferenceField,\r\n  DateInput,\r\n} from \"react-admin\";\r\n\r\nconst ListActions = (props) => {\r\n  const { className, exporter, filters, maxResults, ...rest } = props;\r\n  const {\r\n    currentSort,\r\n    resource,\r\n    displayedFilters,\r\n    filterValues,\r\n    hasCreate,\r\n    basePath,\r\n    selectedIds,\r\n    showFilter,\r\n    total,\r\n  } = useListContext();\r\n  return (\r\n    <TopToolbar className={className} {...sanitizeListRestProps(rest)}>\r\n      {filters &&\r\n        cloneElement(filters, {\r\n          resource,\r\n          showFilter,\r\n          displayedFilters,\r\n          filterValues,\r\n          context: \"button\",\r\n        })}\r\n      <ListButton basePath={basePath} />\r\n      <CreateButton basePath={basePath} />\r\n      <ExportButton\r\n        disabled={total === 0}\r\n        resource={resource}\r\n        sort={currentSort}\r\n        filterValues={filterValues}\r\n        maxResults={maxResults}\r\n      />\r\n    </TopToolbar>\r\n  );\r\n};\r\n\r\nexport const LiveSessionList = (props) => (\r\n  <List {...props} actions={<ListActions />}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"meetingUrl\" />\r\n      <TextField source=\"meetingId\" />\r\n      <TextField source=\"meetingPassword\" />\r\n      <TextField source=\"date\" />\r\n      <TextField source=\"from\" />\r\n      <TextField source=\"to\" />\r\n      <ReferenceField\r\n        source=\"courseGroupSessionId\"\r\n        reference=\"coursegroupsessions\"\r\n      >\r\n        <TextField source=\"id\" />\r\n      </ReferenceField>\r\n      <EditButton />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n\r\nexport const LiveSessionCreate = (props) => (\r\n  <Create {...props}>\r\n    <SimpleForm>\r\n      <TextInput source=\"meetingUrl\" validate={required()} />\r\n      <DateInput source=\"date\" validate={required()} />\r\n      <TextInput source=\"from\" validate={required()} />\r\n      <TextInput source=\"to\" validate={required()} />\r\n      <TextInput source=\"courseGroupSessionId\" validate={required()} />\r\n    </SimpleForm>\r\n  </Create>\r\n);\r\n\r\nexport const LiveSessionEdit = (props) => (\r\n  <Edit {...props}>\r\n    <SimpleForm>\r\n      <TextInput disabled label=\"Id\" source=\"id\" />\r\n      <TextInput source=\"meetingUrl\" validate={required()} />\r\n      <DateInput source=\"date\" validate={required()} />\r\n      <TextInput source=\"from\" validate={required()} />\r\n      <TextInput source=\"to\" validate={required()} />\r\n      <TextInput source=\"courseGroupSessionId\" validate={required()} />\r\n    </SimpleForm>\r\n  </Edit>\r\n);\r\n","import * as React from \"react\";\r\nimport { cloneElement } from \"react\";\r\nimport {\r\n  Create,\r\n  CreateButton,\r\n  Datagrid,\r\n  Edit,\r\n  EditButton,\r\n  ExportButton,\r\n  List,\r\n  ListButton,\r\n  required,\r\n  sanitizeListRestProps,\r\n  SimpleForm,\r\n  TextField,\r\n  TextInput,\r\n  TopToolbar,\r\n  useListContext,\r\n} from \"react-admin\";\r\n\r\nconst ListActions = (props) => {\r\n  const { className, exporter, filters, maxResults, ...rest } = props;\r\n  const {\r\n    currentSort,\r\n    resource,\r\n    displayedFilters,\r\n    filterValues,\r\n    hasCreate,\r\n    basePath,\r\n    selectedIds,\r\n    showFilter,\r\n    total,\r\n  } = useListContext();\r\n  return (\r\n    <TopToolbar className={className} {...sanitizeListRestProps(rest)}>\r\n      {filters &&\r\n        cloneElement(filters, {\r\n          resource,\r\n          showFilter,\r\n          displayedFilters,\r\n          filterValues,\r\n          context: \"button\",\r\n        })}\r\n      <ListButton basePath={basePath} />\r\n      <CreateButton basePath={basePath} />\r\n      <ExportButton\r\n        disabled={total === 0}\r\n        resource={resource}\r\n        sort={currentSort}\r\n        filterValues={filterValues}\r\n        maxResults={maxResults}\r\n      />\r\n    </TopToolbar>\r\n  );\r\n};\r\n\r\nexport const AnnouncementList = (props) => (\r\n  <List {...props} actions={<ListActions />}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"courseId\" />\r\n      <TextField source=\"title\" />\r\n      <TextField source=\"content\" />\r\n      <TextField source=\"createdAt\" />\r\n      <EditButton />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n\r\nexport const AnnouncementCreate = (props) => (\r\n  <Create {...props}>\r\n    <SimpleForm>\r\n      <TextInput source=\"courseId\" validate={required()} />\r\n      <TextInput source=\"title\" validate={required()} />\r\n      <TextInput source=\"content\" validate={required()} />\r\n    </SimpleForm>\r\n  </Create>\r\n);\r\n","import * as React from \"react\";\r\nimport { cloneElement } from \"react\";\r\nimport {\r\n  Create,\r\n  CreateButton,\r\n  Datagrid,\r\n  Edit,\r\n  EditButton,\r\n  ExportButton,\r\n  List,\r\n  ListButton,\r\n  required,\r\n  sanitizeListRestProps,\r\n  SimpleForm,\r\n  TextField,\r\n  TextInput,\r\n  TopToolbar,\r\n  useListContext,\r\n  ReferenceField,\r\n  DateInput,\r\n} from \"react-admin\";\r\n\r\nconst ListActions = (props) => {\r\n  const { className, exporter, filters, maxResults, ...rest } = props;\r\n  const {\r\n    currentSort,\r\n    resource,\r\n    displayedFilters,\r\n    filterValues,\r\n    hasCreate,\r\n    basePath,\r\n    selectedIds,\r\n    showFilter,\r\n    total,\r\n  } = useListContext();\r\n  return (\r\n    <TopToolbar className={className} {...sanitizeListRestProps(rest)}>\r\n      {filters &&\r\n        cloneElement(filters, {\r\n          resource,\r\n          showFilter,\r\n          displayedFilters,\r\n          filterValues,\r\n          context: \"button\",\r\n        })}\r\n      <ListButton basePath={basePath} />\r\n      <CreateButton basePath={basePath} />\r\n      <ExportButton\r\n        disabled={total === 0}\r\n        resource={resource}\r\n        sort={currentSort}\r\n        filterValues={filterValues}\r\n        maxResults={maxResults}\r\n      />\r\n    </TopToolbar>\r\n  );\r\n};\r\n\r\nexport const ProductList = (props) => (\r\n  <List {...props} actions={<ListActions />}>\r\n    <Datagrid>\r\n      <TextField source=\"id\" />\r\n      <TextField source=\"type\" />\r\n      <EditButton />\r\n    </Datagrid>\r\n  </List>\r\n);\r\n\r\nexport const ProductCreate = (props) => (\r\n  <Create {...props}>\r\n    <SimpleForm>\r\n      <TextInput source=\"type\" validate={required()} />\r\n    </SimpleForm>\r\n  </Create>\r\n);\r\n\r\nexport const ProductEdit = (props) => (\r\n  <Edit {...props}>\r\n    <SimpleForm>\r\n      <TextInput disabled label=\"Id\" source=\"id\" />\r\n      <TextInput source=\"type\" validate={required()} />\r\n    </SimpleForm>\r\n  </Edit>\r\n);\r\n","import simpleRestProvider from \"ra-data-simple-rest\";\r\nimport React from \"react\";\r\nimport { Admin, fetchUtils, Resource } from \"react-admin\";\r\nimport \"./App.css\";\r\nimport authProvider from \"./auth/authProvider\";\r\nimport { API_URL } from \"./constants\";\r\nimport {\r\n  AdminCreate,\r\n  AdminEdit,\r\n  AdminList,\r\n  AnnouncementCreate,\r\n  AnnouncementList,\r\n  AreaCreate,\r\n  AreaEdit,\r\n  AreaList,\r\n  CenterCreate,\r\n  CenterEdit,\r\n  CenterList,\r\n  CityCreate,\r\n  CityEdit,\r\n  CityList,\r\n  CourseCreate,\r\n  CourseEdit,\r\n  CourseGroupCreate,\r\n  CourseGroupEdit,\r\n  CourseGroupList,\r\n  CourseGroupSessionCreate,\r\n  CourseGroupSessionEdit,\r\n  CourseGroupSessionList,\r\n  CourseList,\r\n  LectureCreate,\r\n  LectureEdit,\r\n  LectureList,\r\n  LiveSessionCreate,\r\n  LiveSessionEdit,\r\n  LiveSessionList,\r\n  OrderCreate,\r\n  OrderEdit,\r\n  OrderItemCreate,\r\n  OrderItemEdit,\r\n  OrderItemList,\r\n  OrderList,\r\n  ProductCreate,\r\n  ProductEdit,\r\n  ProductList,\r\n  SectionCreate,\r\n  SectionEdit,\r\n  SectionList,\r\n  StaffCenterCreate,\r\n  StaffCenterEdit,\r\n  StaffCenterList,\r\n  StaffCreate,\r\n  StaffEdit,\r\n  StaffList,\r\n  StudentCreate,\r\n  StudentEdit,\r\n  StudentList,\r\n  SubjectCreate,\r\n  SubjectEdit,\r\n  SubjectList,\r\n  TutorCreate,\r\n  TutorEdit,\r\n  TutorList,\r\n} from \"./resources\";\r\n\r\nconst httpClient = (url, options = {}) => {\r\n  options.credentials = \"include\";\r\n  return fetchUtils.fetchJson(url, options);\r\n};\r\n\r\nconst App = () => {\r\n  return (\r\n    <Admin\r\n      authProvider={authProvider}\r\n      dataProvider={simpleRestProvider(`${API_URL}/admin`, httpClient)}\r\n    >\r\n      <Resource\r\n        name=\"admins\"\r\n        list={AdminList}\r\n        create={AdminCreate}\r\n        edit={AdminEdit}\r\n      />\r\n\r\n      <Resource\r\n        name=\"students\"\r\n        list={StudentList}\r\n        create={StudentCreate}\r\n        edit={StudentEdit}\r\n      />\r\n\r\n      <Resource\r\n        name=\"tutors\"\r\n        list={TutorList}\r\n        create={TutorCreate}\r\n        edit={TutorEdit}\r\n      />\r\n\r\n      <Resource\r\n        name=\"staffs\"\r\n        list={StaffList}\r\n        create={StaffCreate}\r\n        edit={StaffEdit}\r\n      />\r\n\r\n      <Resource\r\n        name=\"subjects\"\r\n        list={SubjectList}\r\n        create={SubjectCreate}\r\n        edit={SubjectEdit}\r\n      />\r\n\r\n      <Resource\r\n        name=\"cities\"\r\n        list={CityList}\r\n        create={CityCreate}\r\n        edit={CityEdit}\r\n      />\r\n\r\n      <Resource\r\n        name=\"areas\"\r\n        list={AreaList}\r\n        create={AreaCreate}\r\n        edit={AreaEdit}\r\n      />\r\n\r\n      <Resource\r\n        name=\"centers\"\r\n        list={CenterList}\r\n        create={CenterCreate}\r\n        edit={CenterEdit}\r\n      />\r\n\r\n      <Resource\r\n        name=\"staffcenters\"\r\n        list={StaffCenterList}\r\n        create={StaffCenterCreate}\r\n        edit={StaffCenterEdit}\r\n      />\r\n\r\n      <Resource\r\n        name=\"orders\"\r\n        list={OrderList}\r\n        create={OrderCreate}\r\n        edit={OrderEdit}\r\n      />\r\n\r\n      <Resource\r\n        name=\"orderitems\"\r\n        list={OrderItemList}\r\n        create={OrderItemCreate}\r\n        edit={OrderItemEdit}\r\n      />\r\n\r\n      <Resource\r\n        name=\"courses\"\r\n        list={CourseList}\r\n        create={CourseCreate}\r\n        edit={CourseEdit}\r\n      />\r\n\r\n      <Resource\r\n        name=\"coursegroups\"\r\n        list={CourseGroupList}\r\n        create={CourseGroupCreate}\r\n        edit={CourseGroupEdit}\r\n      />\r\n\r\n      <Resource\r\n        name=\"coursegroupsessions\"\r\n        list={CourseGroupSessionList}\r\n        create={CourseGroupSessionCreate}\r\n        edit={CourseGroupSessionEdit}\r\n      />\r\n\r\n      <Resource\r\n        name=\"sections\"\r\n        list={SectionList}\r\n        create={SectionCreate}\r\n        edit={SectionEdit}\r\n      />\r\n\r\n      <Resource\r\n        name=\"lectures\"\r\n        list={LectureList}\r\n        create={LectureCreate}\r\n        edit={LectureEdit}\r\n      />\r\n\r\n      <Resource\r\n        name=\"livesessions\"\r\n        list={LiveSessionList}\r\n        create={LiveSessionCreate}\r\n        edit={LiveSessionEdit}\r\n      />\r\n\r\n      <Resource\r\n        name=\"announcements\"\r\n        list={AnnouncementList}\r\n        create={AnnouncementCreate}\r\n      />\r\n\r\n      <Resource\r\n        name=\"products\"\r\n        list={ProductList}\r\n        create={ProductCreate}\r\n        edit={ProductEdit}\r\n      />\r\n    </Admin>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}